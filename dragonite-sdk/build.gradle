/*
 * The Dragonite Project
 * -------------------------
 * See the LICENSE file in the root directory for license information.
 */



plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

group 'com.vecsight.dragonite'
version '0.3.4'

apply plugin: 'java-library'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'application'


ext.classifier      = ':jdk8'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.quasarVer       = '0.7.10'
ext.junitVer        = '4.12'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

configurations {
    quasar
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile project(':dragonite-utils')
    compile 'com.github:bucket4j:1.3.0'
    compile "co.paralleluniverse:quasar-core:${quasarVer}${classifier}"

    quasar "co.paralleluniverse:quasar-core:${quasarVer}${classifier}@jar"

    testCompile "junit:junit:$junitVer"
}

buildConfig {
    clsName = 'DragoniteBuildConfig'
}

test {
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}


tasks.withType(Test) {
    useJUnit()
    // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'

    jvmArgs "-Xmx2048m"
    doLast() {
        println "file://" + getReports().getHtml().getDestination() + "/index.html"
    }
}


mainClassName = "com.vecsight.dragonite.sdk.web.DevConsoleWebServer"


if (project.hasProperty('method')) {
    apply from: "../gradle/${project.getProperty('method')}.gradle"
} else {
    apply from: "../gradle/agent.gradle"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}






























